package com.codibly.schedulerclient.api;

import lombok.Getter;
import org.apache.commons.lang3.ObjectUtils;
import org.jetbrains.annotations.NotNull;


/**
 * Represents the description of a job to be executed. Encapsulates
 * the information needed to manage the job execution and its notifications.
 * When the job starts, a notification will be emitted through {@link JobExecutionNotification}
 * using the specified fields.
 *
 * <ul>
 *   <li>{@code id} - The unique identifier of the job. This id will be used internally by dkron.
 *       Ensuring the uniqueness of this ID is the responsibility of the library client.</li>
 *   <li>{@code jobNotificationPayload} - Payload containing additional information that will be sent as part of
 *       the job execution notification. The payload can be used by listeners to
 *       perform specific actions upon receiving the notification. This payload must be a POJO with a no-args constructor, getters, and setters.</li>
 *   <li>{@code schedule} - Specifies the schedule for executing the job.
 *       Defines the frequency, time, and other relevant scheduling details.</li>
 * </ul>
 */
@Getter
public final class JobDescription {
    private final @NotNull JobId jobId;
    private final @NotNull Object jobNotificationPayload;
    private final @NotNull Schedule schedule;

    /**
     * Constructs a JobDescription with a given business ID.
     * This constructor is suitable when there is a business-related reason to provide a specific ID for the job.
     * <p>
     * Note: Users of this library must ensure that the provided business ID is unique within dkron.
     * If there's a possibility of ID collisions within dkron, consider using the constructor that auto-generates an ID.
     * </p>
     */
    public JobDescription(@NotNull JobId id, @NotNull Object jobNotificationPayload, @NotNull Schedule schedule) {
        if (ObjectUtils.anyNull(id, jobNotificationPayload, schedule)) {
            throw new IllegalArgumentException("All fields are required");
        }
        this.jobId = id;
        this.jobNotificationPayload = jobNotificationPayload;
        this.schedule = schedule;
    }

    /**
     * Job description with auto generated id
     * This constructor is suitable when there is no specific business ID available or relevant.
     */
    public JobDescription(@NotNull Object jobNotificationPayload, @NotNull Schedule schedule) {
        this(JobId.autoGenerated(), jobNotificationPayload, schedule);
    }
}

